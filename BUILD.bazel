# Add rules here to build your software
# See https://docs.bazel.build/versions/master/build-ref.html#BUILD_files

load("@build_bazel_rules_nodejs//:defs.bzl", "nodejs_binary")

# Allow any ts_library rules in this workspace to reference the config
# Note: if you move the tsconfig.json file to a subdirectory, you can add an alias() here instead
#   so that ts_library rules still use it by default.
#   See https://www.npmjs.com/package/@bazel/typescript#installation
exports_files(
    [
        "tsconfig.json",
        "cdk.json",
    ],
    visibility = ["//:__subpackages__"],
)

nodejs_binary(
    name = "cdk",
    data = [
        "cdk.json",
        "tsconfig.json",
        "//lib:app",
        "//lib:app_ts",
        "@npm//:node_modules",
    ],
    entry_point = "@npm//:node_modules/aws-cdk/bin/cdk",
    visibility = ["//visibility:public"],
)

genrule(
    name = "synth",
    outs = ["synth.tar"],
    cmd = "$(execpath //lib:app) cdk.out $@",
    tools = ["//lib:app"],
    visibility = ["//visibility:public"],
)

load("@bazel_gazelle//:def.bzl", "gazelle")

# gazelle:prefix github.com/kindlyops/bazel-cdk-demo
gazelle(name = "gazelle")

load("//:manifest.bzl", "lambda_manifest")

lambda_manifest(
    name = "manifest",
    srcs = [
        "//lambdas/demo:lambda_deploy",
        "//lambdas/demo2:lambda_deploy",
    ],
)
